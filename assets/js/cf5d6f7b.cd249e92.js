"use strict";(self.webpackChunk_clean_stack_source=self.webpackChunk_clean_stack_source||[]).push([[8276],{5728:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"platform-features/caching","title":"Cache Implementation Guide","description":"Overview","source":"@site/docs/platform-features/caching.md","sourceDirName":"platform-features","slug":"/platform-features/caching","permalink":"/docs/platform-features/caching","draft":false,"unlisted":false,"editUrl":"https://github.com/ersanyamarya/clean-stack/tree/main/apps/clean-docs/docs/platform-features/caching.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Caching"},"sidebar":"tutorialSidebar","previous":{"title":"Advanced Configuration","permalink":"/docs/platform-features/observability/advanced"},"next":{"title":"Rate Limiter","permalink":"/docs/platform-features/rate-limiter"}}');var a=r(4848),i=r(8453);const t={sidebar_label:"Caching"},c="Cache Implementation Guide",l={},o=[{value:"Overview",id:"overview",level:2},{value:"Core Components",id:"core-components",level:2},{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Cache Provider Interface",id:"cache-provider-interface",level:2},{value:"Invalidation Groups",id:"invalidation-groups",level:2},{value:"Middleware Usage",id:"middleware-usage",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Monitoring &amp; Statistics",id:"monitoring--statistics",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Cache-Aside Pattern",id:"cache-aside-pattern",level:3},{value:"Bulk Operations",id:"bulk-operations",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"cache-implementation-guide",children:"Cache Implementation Guide"})}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(n.p,{children:["Clean Stack provides a flexible caching system through the ",(0,a.jsx)(n.code,{children:"@clean-stack/cache"})," package. The implementation supports multiple cache providers with a consistent interface."]}),"\n",(0,a.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,a.jsx)(n.mermaid,{value:"graph TD\n    A[Cache Store] --\x3e B[Provider Interface]\n    B --\x3e C[Redis Provider]\n    B --\x3e D[In-Memory Provider]\n    B --\x3e E[Custom Provider]\n    A --\x3e F[Invalidation Groups]\n    A --\x3e G[Statistics]"}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"bun install @clean-stack/cache\n"})}),"\n",(0,a.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { createCacheStore } from '@clean-stack/cache';\nimport { createRedisProvider } from '@clean-stack/redis';\n\n// Initialize provider\nconst redisProvider = await createRedisProvider({\n  url: 'redis://localhost:6379'\n});\n\n// Create cache store\nconst cacheStore = await createCacheStore(redisProvider);\n\n// Basic operations\nawait cacheStore.set('key', 'value', { ttl: 3600 });\nconst value = await cacheStore.get('key');\nawait cacheStore.delete('key');\n"})}),"\n",(0,a.jsx)(n.h2,{id:"cache-provider-interface",children:"Cache Provider Interface"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"interface CacheProvider {\n  set(key: string, value: string, ttl?: number): Promise<void>;\n  get(key: string): Promise<string | null>;\n  delete(key: string): Promise<void>;\n  deleteManyKeys(keys: string[]): Promise<void>;\n  clear(): Promise<void>;\n  getAllKeys(): Promise<string[]>;\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"invalidation-groups",children:"Invalidation Groups"}),"\n",(0,a.jsx)(n.p,{children:"Groups allow efficient invalidation of related cache entries:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Store with groups\nawait cacheStore.set('user:1', userData, {\n  groups: ['users', 'active-users']\n});\n\nawait cacheStore.set('user:2', userData2, {\n  groups: ['users', 'inactive-users']\n});\n\n// Invalidate by group\nawait cacheStore.invalidateGroup('active-users'); // Removes user:1\nawait cacheStore.invalidateGroup('users'); // Removes both\n"})}),"\n",(0,a.jsx)(n.h2,{id:"middleware-usage",children:"Middleware Usage"}),"\n",(0,a.jsx)(n.p,{children:"Integrate with Koa middleware for automatic caching:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { createCacheMiddleware } from '@clean-stack/cache';\n\nconst cacheMiddleware = createCacheMiddleware(cacheStore, {\n  defaultTTL: 3600,\n  keyPrefix: 'api:',\n});\n\nrouter.get('/users/:id', \n  cacheMiddleware(), // Cache with default options\n  async (ctx) => {\n    // Handler logic\n  }\n);\n\nrouter.get('/products',\n  cacheMiddleware({\n    ttl: 1800,\n    keyGenerator: (ctx) => `products:${ctx.query.category}`,\n    groups: ['products']\n  }),\n  async (ctx) => {\n    // Handler logic\n  }\n);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Key Design"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Use consistent naming patterns"}),"\n",(0,a.jsx)(n.li,{children:"Include version in keys if data format changes"}),"\n",(0,a.jsx)(n.li,{children:"Keep keys reasonably short"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"TTL Strategy"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Set appropriate TTLs based on data volatility"}),"\n",(0,a.jsx)(n.li,{children:"Use shorter TTLs for frequently changing data"}),"\n",(0,a.jsx)(n.li,{children:"Consider using infinite TTL for static data"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Group Management"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Group related items logically"}),"\n",(0,a.jsx)(n.li,{children:"Don't overuse groups - they add overhead"}),"\n",(0,a.jsx)(n.li,{children:"Consider data relationships when designing groups"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"monitoring--statistics",children:"Monitoring & Statistics"}),"\n",(0,a.jsx)(n.p,{children:"The cache store tracks important metrics:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const stats = await cacheStore.getStatistics();\nconsole.log(stats);\n// {\n//   hits: 150,\n//   misses: 45,\n//   hitRate: 0.769,\n//   size: 195,\n//   groupCount: 5\n// }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsx)(n.p,{children:"The cache store includes built-in error handling:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"try {\n  await cacheStore.set('key', 'value');\n} catch (error) {\n  if (error instanceof CacheProviderError) {\n    // Handle provider-specific errors\n  } else if (error instanceof CacheKeyError) {\n    // Handle key validation errors\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Data Serialization"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Do serialize complex data\nawait cache.set('user', JSON.stringify(user));\nconst user = JSON.parse(await cache.get('user'));\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Error Handling"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Handle cache failures gracefully\nconst getUserData = async (id: string) => {\n  try {\n    const cached = await cache.get(`user:${id}`);\n    if (cached) return JSON.parse(cached);\n  } catch (error) {\n    logger.warn('Cache error', error);\n  }\n  return fetchUserFromDB(id);\n};\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Group Management"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Group related data\nawait cache.set(`user:${id}`, userData, {\n  groups: ['users', `user:${id}:*`]\n});\nawait cache.set(`user:${id}:preferences`, prefs, {\n  groups: [`user:${id}:*`]\n});\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,a.jsx)(n.h3,{id:"cache-aside-pattern",children:"Cache-Aside Pattern"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"async function getUser(id: string) {\n  const cacheKey = `user:${id}`;\n  \n  // Try cache first\n  const cached = await cacheStore.get(cacheKey);\n  if (cached) return JSON.parse(cached);\n  \n  // Cache miss - get from database\n  const user = await database.users.findById(id);\n  \n  // Store in cache\n  await cacheStore.set(cacheKey, JSON.stringify(user), {\n    ttl: 3600,\n    groups: ['users']\n  });\n  \n  return user;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"bulk-operations",children:"Bulk Operations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"async function bulkGetUsers(ids: string[]) {\n  const cacheKeys = ids.map(id => `user:${id}`);\n  \n  // Get all cached users\n  const cachedUsers = await Promise.all(\n    cacheKeys.map(key => cacheStore.get(key))\n  );\n  \n  // Find missing users\n  const missingIds = ids.filter((_, i) => !cachedUsers[i]);\n  \n  if (missingIds.length > 0) {\n    const dbUsers = await database.users.findByIds(missingIds);\n    \n    // Cache missing users\n    await Promise.all(\n      dbUsers.map(user => \n        cacheStore.set(`user:${user.id}`, JSON.stringify(user), {\n          groups: ['users']\n        })\n      )\n    );\n    \n    // Merge results\n    return ids.map((id, i) => \n      cachedUsers[i] ? JSON.parse(cachedUsers[i]) : \n      dbUsers.find(u => u.id === id)\n    );\n  }\n  \n  return cachedUsers.map(u => JSON.parse(u));\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>c});var s=r(6540);const a={},i=s.createContext(a);function t(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);